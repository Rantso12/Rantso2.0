#Rants'o Kananelo 202000057
#56411666/63486028
#kananelorantso12@gmail
#CS3520 Assignment1
.data
.text

main:
   	jal detReversible
  	li $v0,10
   	syscall
 
	li $s0,0
	li $s4,1 #comparing constant	
	li $s1,1
	li $s2,2
	li $s3,3
	li $s5,5
	li $s7,7
	li $s4,10
    
detPrime: #This function determines prime numbers

	
	bgt $a1,$s4,Else #if $a1< $s4 we find prime numbers less than 10
	div $a1,$s2
	mfhi $t0
	bnez $t0,Test2
	li $v0,1
	move $v0,$s0
	syscall
	li $v0,10
	syscall
	
	Test2:
	div $a1,$s3
	mfhi $t1
	bnez $t1,Return
	li $v0,1
	move $v0,$s0
	syscall
	li $v0,10
	syscall
	Return:
	li $v0,1
	move $v0,$s1
	syscall
	li $v0,10
	syscall
	
	# the above code is equivalent to "if((square % 2 == 0)||( square % 3 == 0))"
	
	Else:			#determining prime numbers greater than 10
	   div $a1,$s2
	   mfhi $t2
	   bnez $t2,Test3
	   li $v0,1
	   move $v0,$s0
	   syscall
	   li $v0,10
	   syscall
	Test3:
	   div $a1,$s3
	   mfhi $t3
	   bnez $t3,Test5
	   li $v0,1
	   move $v0,$s0
	   syscall
	   li $v0,10
	   syscall
	Test5:
	   div $a1,$s5
	   mfhi $t4
	   bnez $t4,Test7
	   li $v0,1
	   move $v0,$s0
	   syscall
	   li $v0,10
	   syscall
	Test7:
	    div $a1,$s7
	    mfhi $t5
	    bnez $t5,Return
	    li $v0,1
	    move $v0,$s0
	    syscall
	    
	    li $v0,10
	    syscall
	#The above code is equivalent to "if((square % 2 == 0)||( square % 3 == 0)||( square % 5 == 0)||( square % 7 == 0))"
jr $ra

detReverse:
#This function determines the reverse of the square of primes 
loop:
	
	beq $a1,$zero,Exit #for(;square != 0;)
	div $a1,$s4
	mfhi $t1	  #remainder = square % 10;
	mul $t3,$s0,$s4
	add $s0, $t3,$t1 #reverse = reverse * 10 + remainder;
	div $a1,$s4
	mflo $a1	#square = square / 10;
	
	
	j loop		
	jr $ra
Exit:
	li $v0,1
	move $v1, $s0
	syscall
	
	li $v0,10
	syscall

    
detReversible:
	bgt $s0,$s4,Exit #condion: count < 10
	move $1,$s1
	jal detPrime
	move $t0,$v0
	bne $t0,$v0,Exit #if(detPrime(num) == 1)
	mul $t1,$s1,$s1 #square = num*num;
	
	move $a1,$t1
	jal detReverse #reversed = detReverse(square);
	move $t2,$v1
	beq $t1,$t2,Exit #if(square != reversed)
	for:
	  div $t2,$s2
	  mflo $t3
	  bgt $s0,$t3,Exit #i < reversed/2;
	  bne $t1,$t2,Exit #if(i*i == reversed)
	  move $a1,$s0
	  jal detPrime
	  move $t4,$v0
	  bne $t4,$s4,Exit #if(detPrime(i) == 1)
	  li $v0,1
	  move $a0,$t1
	  addi $s0,$s0,1
	  addi $s1,$s1,1
	  
	j for
	
jr $ra